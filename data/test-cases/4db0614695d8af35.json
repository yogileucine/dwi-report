{"uid":"4db0614695d8af35","name":"Test to repeat the task which is completed with exception","fullName":"tests.scenarios.job.test_repeat_task.TestRepeatTask#test_repeat_task_completed_with_exception","historyId":"bdc3aec55c61b8cab3b59674912f30d8","time":{"start":1733939005660,"stop":1733939018362,"duration":12702},"description":"This test case verify that if user can repeat task which is completed with exception","descriptionHtml":"<p>This test case verify that if user can repeat task which is completed with exception</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_repeat_task.TestRepeatTask object at 0x78cf7c3e5be0>, user_group_creation = 'Auto_Test_user_group_TestRepeatTask_103', job_execution_by = 'user_group', users_list = []\n\n    @allure.title(\"Test to repeat the task which is completed with exception\")\n    @allure.description(\"This test case verify that if user can repeat task which is completed with exception\")\n    @allure.link(\"https://app.clickup.com/t/86cvw0xdfs\")\n    @pytest.mark.scenario\n    @pytest.mark.job\n    @pytest.mark.repeat_task\n    @pytest.mark.repeat_task_completed_with_exception\n    @pytest.mark.parametrize(\"job_execution_by, users_list\", [(\"user\", [Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\")]),\n                                                              (\"user_group\", [])])\n    def test_repeat_task_completed_with_exception(self, user_group_creation, job_execution_by, users_list):\n        process_data = self.process_obj.test_add_new_stage_and_task()\n        login(Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"), Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        self.job_obj.assign_user_and_user_group_to_process(job_execution_by, users_list, user_group_creation,\n                                                           all_task_assignmnet=True)\n        self.job_obj.create_job()\n        self.job_obj.start_job()\n        self.job_obj.complete_task(task_name_01, ctwe=True, ctwe_reason=\"Completed with exception\")\n        self.job_obj.repeat_task(task_name_01)\n        self.job_obj.start_task(task_name_01, order_tree=1)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"single_select_param\"], data={\"value\": \"monday\"})\n>       self.job_obj.complete_task(task_name_01, order_tree=1)\n\ntests/scenarios/job/test_repeat_task.py:196: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/unit/execution/jobs.py:679: in complete_task\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>, message = ''\n\n    def status_200(response, message=None):\n        if message is None:\n            message = response.text\n>       assert response.status_code == 200, message\nE       AssertionError\n\nutil/validate_response.py:4: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"env_setup","time":{"start":1733926201392,"stop":1733926201392,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"login_fixture","time":{"start":1733926201392,"stop":1733926201601,"duration":209},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733926201601,"stop":1733926201720,"duration":119},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"select_usecase_fixture","time":{"start":1733926201720,"stop":1733926201814,"duration":94},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"username_to_user_id_mapping","time":{"start":1733926201814,"stop":1733926202088,"duration":274},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_group_creation","time":{"start":1733938736499,"stop":1733938737157,"duration":658},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"flush_param_counters","time":{"start":1733939005659,"stop":1733939005659,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"flush_param_counters::0","time":{"start":1733939018387,"stop":1733939018387,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"repeat_task_completed_with_exception"},{"name":"tag","value":"repeat_task"},{"name":"tag","value":"job"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.job"},{"name":"suite","value":"test_repeat_task"},{"name":"subSuite","value":"TestRepeatTask"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"60865-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.job.test_repeat_task"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"job_execution_by","value":"'user_group'"},{"name":"users_list","value":"[]"}],"links":[{"name":"https://app.clickup.com/t/86cvw0xdfs","url":"https://app.clickup.com/t/86cvw0xdfs","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"9c494cf758fb7cc8","status":"failed","statusDetails":"AssertionError","time":{"start":1733763917074,"stop":1733763929722,"duration":12648}},{"uid":"780eee09dfc5d9fd","status":"failed","statusDetails":"AssertionError","time":{"start":1733501398447,"stop":1733501411029,"duration":12582}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["repeat_task","repeat_task_completed_with_exception","scenario","job"]},"source":"4db0614695d8af35.json","parameterValues":["'user_group'","[]"]}