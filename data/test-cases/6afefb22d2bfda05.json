{"uid":"6afefb22d2bfda05","name":"Test to verify that the Create Object Task Actions works as expected at the completion of the task","fullName":"tests.scenarios.job.test_task_automation_actions.TestTaskAutomationActions#test_create_object_task_action_triggered_at_completion_of_task","historyId":"8f30d0d66c49a974e13345d037876bf0","time":{"start":1733941420565,"stop":1733941438452,"duration":17887},"description":"This testcase tests that if the Create Object Task Actions gets triggered at the completion of the task during job execution","descriptionHtml":"<p>This testcase tests that if the Create Object Task Actions gets triggered at the completion of the task during job execution</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_task_automation_actions.TestTaskAutomationActions object at 0x78cf7c2c6c60>, user_group_creation = 'Auto_Test_user_group_TestTaskAutomationActions_1279', job_execution_by = 'user_group', users_list = []\n\n    @allure.title(\n        \"Test to verify that the Create Object Task Actions works as expected at the completion of the task\")\n    @allure.description(\n        \"This testcase tests that if the Create Object Task Actions gets triggered at the completion of the task \"\n        \"during job execution\")\n    @allure.link(\"https://app.clickup.com/t/86cukbx0u\")\n    @pytest.mark.scenario\n    @pytest.mark.job\n    @pytest.mark.create_object_task_action_triggered_at_completion_of_task\n    @pytest.mark.parametrize(\"job_execution_by, users_list\", [(\"user\", [Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\")]),\n                                                              (\"user_group\", [])])\n    def test_create_object_task_action_triggered_at_completion_of_task(self, user_group_creation, job_execution_by,\n                                                                       users_list):\n        process_data = self.process_obj.test_add_create_object_action_type_at_completion_of_task()\n        object_data, display_name = object_type_objects.test_create_objects(\n            {process_data[\"properties\"][\"title_display_name\"]: \"object-02\",\n             process_data[\"properties\"][\"single_line_property\"]: \"single_line\",\n             process_data[\"properties\"][\"multi_line_property\"]: \"multi_line\",\n             process_data[\"properties\"][\"number_property\"]: \"02\",\n             process_data[\"properties\"][\"multi_select_property\"]: [\n                 process_data[\"properties\"][\"multi_select_option\"]],\n             process_data[\"properties\"][\"single_select_property\"]: process_data[\"properties\"][\n                 \"single_select_option\"],\n             process_data[\"properties\"][\"date_property\"]: \"12-12-2012\",\n             process_data[\"properties\"][\"date_time_property\"]: datetime.now().strftime(\"%d-%m-%Y %H:%M\")},\n            process_data[\"properties\"][\"display_name\"])\n        login(Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"), Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        self.job_obj.assign_user_and_user_group_to_process(job_execution_by, users_list, user_group_creation,\n                                                           all_task_assignmnet=True)\n        self.job_obj.create_job()\n    \n        self.job_obj.start_job()\n        self.job_obj.start_task(task_name_01)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"res_param\"],\n                                       data={\"value\": object_data[\"displayName\"]})\n>       self.job_obj.complete_task(task_name_01,\n                                   create_object_data={process_data[\"properties\"][\"title_display_name\"]: \"object_01\",\n                                                       process_data[\"properties\"][\n                                                           \"single_line_property\"]: \"single_line\",\n                                                       process_data[\"properties\"][\"multi_line_property\"]: \"multi_line\",\n                                                       process_data[\"properties\"][\"number_property\"]: \"01\",\n                                                       process_data[\"properties\"][\"multi_select_property\"]: [\n                                                           process_data[\"properties\"][\"multi_select_option\"]],\n                                                       process_data[\"properties\"][\"single_select_property\"]:\n                                                           process_data[\"properties\"][\n                                                               \"single_select_option\"],\n                                                       process_data[\"properties\"][\"date_property\"]: \"12-12-2012\",\n                                                       process_data[\"properties\"][\n                                                           \"date_time_property\"]: datetime.now().strftime(\n                                                           \"%d-%m-%Y %H:%M\")},\n                                   action_type=Action_type.CREATE_OBJECT.value)\n\ntests/scenarios/job/test_task_automation_actions.py:1503: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/unit/execution/jobs.py:679: in complete_task\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>, message = ''\n\n    def status_200(response, message=None):\n        if message is None:\n            message = response.text\n>       assert response.status_code == 200, message\nE       AssertionError\n\nutil/validate_response.py:4: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"env_setup","time":{"start":1733926201392,"stop":1733926201392,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"login_fixture","time":{"start":1733926201392,"stop":1733926201601,"duration":209},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733926201601,"stop":1733926201720,"duration":119},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"select_usecase_fixture","time":{"start":1733926201720,"stop":1733926201814,"duration":94},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"username_to_user_id_mapping","time":{"start":1733926201814,"stop":1733926202088,"duration":274},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_group_creation","time":{"start":1733939992512,"stop":1733939993160,"duration":648},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"flush_param_counters","time":{"start":1733941420564,"stop":1733941420564,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"flush_param_counters::0","time":{"start":1733941438504,"stop":1733941438504,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"create_object_task_action_triggered_at_completion_of_task"},{"name":"tag","value":"job"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.job"},{"name":"suite","value":"test_task_automation_actions"},{"name":"subSuite","value":"TestTaskAutomationActions"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"60865-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.job.test_task_automation_actions"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"job_execution_by","value":"'user_group'"},{"name":"users_list","value":"[]"}],"links":[{"name":"https://app.clickup.com/t/86cukbx0u","url":"https://app.clickup.com/t/86cukbx0u","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"7f96b0ab6174b073","status":"failed","statusDetails":"AssertionError","time":{"start":1733766442287,"stop":1733766460078,"duration":17791}},{"uid":"87862dd7adb41763","status":"failed","statusDetails":"AssertionError","time":{"start":1733503610008,"stop":1733503627432,"duration":17424}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["scenario","create_object_task_action_triggered_at_completion_of_task","job"]},"source":"6afefb22d2bfda05.json","parameterValues":["'user_group'","[]"]}