{"uid":"c5b3417d6eeb7ddd","name":"Test to verify that branching rules added to show parameters works as expected during execution with recurrence","fullName":"tests.scenarios.job.test_recurrence_execution.TestRecurrenceExecution#test_branching_rule_to_show_hidden_parameters_with_recurrence","historyId":"6d253215269809717a74f73aca8961be","time":{"start":1733501080360,"stop":1733501096077,"duration":15717},"description":"This testcase tests if branching rules added on single select dropdown parameter to show the parameters works as expected during execution with recurrence","descriptionHtml":"<p>This testcase tests if branching rules added on single select dropdown parameter to show the parameters works as expected during execution with recurrence</p>\n","status":"failed","statusMessage":"AssertionError: {\"timestamp\":1733501096,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"564480732000657408\",\"userId\":null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E450\",\"message\":\"Parameter Data Inconsistent\",\"errorInfo\":null},{\"id\":\"564480732000657410\",\"userId\":null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E450\",\"message\":\"Parameter Data Inconsistent\",\"errorInfo\":null}]}","statusTrace":"self = <test_recurrence_execution.TestRecurrenceExecution object at 0x7af82222d9d0>, user_group_creation = 'Auto_Test_user_group_TestRecurrenceExecution_965', job_execution_by = 'user_group', users_list = []\n\n    @allure.title(\"Test to verify that branching rules added to show parameters works as expected during execution \"\n                  \"with recurrence\")\n    @allure.description(\"This testcase tests if branching rules added on single select dropdown parameter to show the \"\n                        \"parameters works as expected during execution with recurrence\")\n    @allure.link(\"https://app.clickup.com/t/86cvva640\")\n    @pytest.mark.scenario\n    @pytest.mark.job\n    @pytest.mark.task_recurrence_execution\n    @pytest.mark.test_branching_rule_to_show_hidden_parameters_with_recurrence\n    @pytest.mark.parametrize(\"job_execution_by, users_list\", [(\"user\", [Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\")]),\n                                                              (\"user_group\", [])])\n    def test_branching_rule_to_show_hidden_parameters_with_recurrence(self, user_group_creation, job_execution_by,\n                                                                      users_list):\n        process_data = self.recurrence_obj.test_add_branching_rule_in_single_select_dropdown_parameter_to_show_hidden_parameters_with_recurrence()\n        login(Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"), Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        self.job_obj.assign_user_and_user_group_to_process(job_execution_by, users_list, user_group_creation,\n                                                           all_task_assignmnet=True)\n        self.job_obj.create_job()\n        self.job_obj.start_job()\n        self.job_obj.start_task(task_name_01, recurrence=True)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"single_dropdown_param\"],\n                                       data={\"value\": \"sunday\"})\n        if self.job_obj.validate_if_parameter_is_hidden(task_name_01, process_data[\"sign_param\"]):\n            raise AssertionError(\n                \"The parameter \" + process_data[\"sign_param\"] + \" is not shown as per the branching rules defined\")\n    \n        if self.job_obj.validate_if_parameter_is_hidden(task_name_01, process_data[\"single_line_param\"]):\n            raise AssertionError(\n                \"The parameter \" + process_data[\n                    \"single_line_param\"] + \"is not shown as per the branching rules defined\")\n        self.job_obj.execute_parameter(task_name_01, process_data[\"image_param\"], data=None)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"sign_param\"], data=None)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"single_line_param\"], data={\"value\": \"qwerty\"})\n        self.job_obj.complete_task(task_name_01, recurrence=True, continue_recurrence=True)\n    \n        new_recurrence_data = self.job_obj.poll_stage_data(job_id=const.JOB_ID, stage_name=stage_name_01)\n        self.job_obj.assert_task_execution_type(new_recurrence_data, 1, \"RECURRING\")\n    \n        self.job_obj.start_task(task_name_01, recurrence=True, recurrence_start_reason=\"Test_recurrence\")\n        self.job_obj.execute_parameter(task_name_01, process_data[\"single_dropdown_param\"],\n                                       data={\"value\": \"sunday\"})\n        if self.job_obj.validate_if_parameter_is_hidden(task_name_01, process_data[\"sign_param\"]):\n            raise AssertionError(\n                \"The parameter \" + process_data[\"sign_param\"] + \" is not shown as per the branching rules defined\")\n    \n        if self.job_obj.validate_if_parameter_is_hidden(task_name_01, process_data[\"single_line_param\"]):\n            raise AssertionError(\n                \"The parameter \" + process_data[\"single_line_param\"] + \"is not shown as per the branching rules \"\n                                                                       \"defined\")\n        self.job_obj.execute_parameter(task_name_01, process_data[\"image_param\"], data=None)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"sign_param\"], data=None)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"single_line_param\"], data={\"value\": \"qwerty\"})\n>       self.job_obj.complete_task(task_name_01, recurrence=True)\n\ntests/scenarios/job/test_recurrence_execution.py:511: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/unit/execution/jobs.py:679: in complete_task\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>\nmessage = '{\"timestamp\":1733501096,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"564480732000657408\",\"user...null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E450\",\"message\":\"Parameter Data Inconsistent\",\"errorInfo\":null}]}'\n\n    def status_200(response, message=None):\n        if message is None:\n            message = response.text\n>       assert response.status_code == 200, message\nE       AssertionError: {\"timestamp\":1733501096,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"564480732000657408\",\"userId\":null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E450\",\"message\":\"Parameter Data Inconsistent\",\"errorInfo\":null},{\"id\":\"564480732000657410\",\"userId\":null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E450\",\"message\":\"Parameter Data Inconsistent\",\"errorInfo\":null}]}\n\nutil/validate_response.py:4: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"env_setup","time":{"start":1733490527832,"stop":1733490527832,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"login_fixture","time":{"start":1733490527832,"stop":1733490528079,"duration":247},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733490528079,"stop":1733490528284,"duration":205},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"select_usecase_fixture","time":{"start":1733490528284,"stop":1733490528542,"duration":258},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"username_to_user_id_mapping","time":{"start":1733490528542,"stop":1733490529001,"duration":459},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_group_creation","time":{"start":1733500862294,"stop":1733500862930,"duration":636},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"flush_param_counters","time":{"start":1733501080359,"stop":1733501080360,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"flush_param_counters::0","time":{"start":1733501096104,"stop":1733501096104,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"test_branching_rule_to_show_hidden_parameters_with_recurrence"},{"name":"tag","value":"task_recurrence_execution"},{"name":"tag","value":"job"},{"name":"tag","value":"scenario"},{"name":"tag","value":"recurrence"},{"name":"parentSuite","value":"tests.scenarios.job"},{"name":"suite","value":"test_recurrence_execution"},{"name":"subSuite","value":"TestRecurrenceExecution"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"29333-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.job.test_recurrence_execution"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"job_execution_by","value":"'user_group'"},{"name":"users_list","value":"[]"}],"links":[{"name":"https://app.clickup.com/t/86cvva640","url":"https://app.clickup.com/t/86cvva640","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["recurrence","scenario","task_recurrence_execution","job","test_branching_rule_to_show_hidden_parameters_with_recurrence"]},"source":"c5b3417d6eeb7ddd.json","parameterValues":["'user_group'","[]"]}