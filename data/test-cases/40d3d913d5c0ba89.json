{"uid":"40d3d913d5c0ba89","name":"Test to validate error while updating the QR code of an existing object","fullName":"tests.scenarios.ontology.test_qr_code.TestQrCode#test_validate_error_when_updating_the_qr_of_an_object_using_duplicate_qr_code","historyId":"503575891f2f428d2fdbee1d1d4d083c","time":{"start":1734111520087,"stop":1734111532423,"duration":12336},"description":"This test case verifies the error when user tries to update the QR of an object using QR of an existing object","descriptionHtml":"<p>This test case verifies the error when user tries to update the QR of an object using QR of an existing object</p>\n","status":"broken","statusMessage":"KeyError: 'errors'","statusTrace":"self = <test_qr_code.TestQrCode object at 0x7326d4c3f980>\n\n    @allure.title(\"Test to validate error while updating the QR code of an existing object\")\n    @allure.description(\n        \"This test case verifies the error when user tries to update the QR of an object using QR of an existing object\")\n    @allure.link(\"https://app.clickup.com/t/86cvt3x26\")\n    @pytest.mark.scenario\n    @pytest.mark.ontology\n    @pytest.mark.qr_code\n    @pytest.mark.validate_error_when_updating_the_qr_of_an_object_using_duplicate_qr_code\n    def test_validate_error_when_updating_the_qr_of_an_object_using_duplicate_qr_code(self):\n        object_response_01 = object_type_objects.test_create_objects(short_code=True)\n        object_response_02 = object_type_objects.test_create_objects(short_code=True)\n        login(Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"), Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n>       actual_error = set_new_short_code_for_existing_object(object_response_02[\"object_id\"],\n                                                              object_response_02[\"object_type_id\"],\n                                                              object_response_01[\"short_code\"], \"validate_error\",\n                                                              negative_testcase=True)\n\ntests/scenarios/ontology/test_qr_code.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobject_id = '675c712bc252f93263e1f4ba', object_type_id = '675c7126c252f93263e1f4a7', short_code = 'FT3lZD6ldC', reason = 'validate_error', negative_testcase = True\n\n    def set_new_short_code_for_existing_object(object_id, object_type_id, short_code, reason, negative_testcase=False):\n        url = const.SHORT_CODE\n        payload = {\"objectId\": object_id, \"objectTypeId\": object_type_id, \"data\": short_code, \"reason\": reason}\n        response = Request.patch(url, payload)\n        if negative_testcase:\n            response.status_code == 409\n>           return response.json()[\"errors\"][0][\"message\"]\nE           KeyError: 'errors'\n\ntests/unit/ontology/qr_code.py:24: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"env_setup","time":{"start":1734094787340,"stop":1734094787340,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"login_fixture","time":{"start":1734094787340,"stop":1734094787555,"duration":215},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1734094787556,"stop":1734094787676,"duration":120},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"select_usecase_fixture","time":{"start":1734094787676,"stop":1734094787784,"duration":108},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"username_to_user_id_mapping","time":{"start":1734094787784,"stop":1734094788037,"duration":253},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"flush_param_counters","time":{"start":1734111520087,"stop":1734111520087,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"flush_param_counters::0","time":{"start":1734111532428,"stop":1734111532428,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"validate_error_when_updating_the_qr_of_an_object_using_duplicate_qr_code"},{"name":"tag","value":"qr_code"},{"name":"tag","value":"ontology"},{"name":"tag","value":"scenario"},{"name":"tag","value":"job"},{"name":"parentSuite","value":"tests.scenarios.ontology"},{"name":"suite","value":"test_qr_code"},{"name":"subSuite","value":"TestQrCode"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"590668-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.ontology.test_qr_code"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cvt3x26","url":"https://app.clickup.com/t/86cvt3x26","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["scenario","validate_error_when_updating_the_qr_of_an_object_using_duplicate_qr_code","qr_code","job","ontology"]},"source":"40d3d913d5c0ba89.json","parameterValues":[]}