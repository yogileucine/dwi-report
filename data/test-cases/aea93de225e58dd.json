{"uid":"aea93de225e58dd","name":"Test to verify that user can execute job with solo task lock on a task in a prototype with both verification enabled","fullName":"tests.scenarios.job.test_solo_task_lock_execution.TestSoloTaskLockExecution#test_execute_job_with_solo_task_lock_on_task_in_prototype_with_both_verification_enabled","historyId":"d01272985ab279d4ba10d027d2cf46ea","time":{"start":1733502354207,"stop":1733502374603,"duration":20396},"description":"This testcase tests that user can execute job with solo task lock on a task in a prototype with both verification enabled","descriptionHtml":"<p>This testcase tests that user can execute job with solo task lock on a task in a prototype with both verification enabled</p>\n","status":"failed","statusMessage":"AssertionError: {\"timestamp\":1733502374,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"564486080442900480\",\"userId\":null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E801\",\"message\":\"You are not assigned to this Job\",\"errorInfo\":null}]}","statusTrace":"self = <test_solo_task_lock_execution.TestSoloTaskLockExecution object at 0x7af822109970>, user_group_creation = 'Auto_Test_user_group_TestSoloTaskLockExecution_1853', job_execution_by = 'user_group', users_list = []\n\n    @allure.title(\n        \"Test to verify that user can execute job with solo task lock on a task in a prototype with both verification \"\n        \"enabled\")\n    @allure.description(\n        \"This testcase tests that user can execute job with solo task lock on a task in a prototype with both \"\n        \"verification enabled\")\n    @allure.link(\"https://app.clickup.com/t/86cuzruf1\")\n    @pytest.mark.scenario\n    @pytest.mark.job\n    @pytest.mark.solo_task_lock\n    @pytest.mark.parametrize(\"job_execution_by, users_list\", [(\"user\", [Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"),\n                                                                        Env.get_env_data(\"QA_ADMIN_USERNAME_01\")]),\n                                                              (\"user_group\", [])])\n    def test_execute_job_with_solo_task_lock_on_task_in_prototype_with_both_verification_enabled(self,\n                                                                                                 user_group_creation,\n                                                                                                 job_execution_by,\n                                                                                                 users_list):\n        process_data = self.solo_task_lock_obj.test_add_solo_task_lock_with_both_verification_enabled()\n        login(Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"), Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        self.job_obj.assign_user_and_user_group_to_process(job_execution_by, users_list, user_group_creation,\n                                                           all_task_assignmnet=True)\n        self.job_obj.create_job()\n        self.job_obj.start_job()\n        self.job_obj.start_task(task_name_01)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"image_capture\"], data=None)\n        self.job_obj.verify_self(task_name_01, process_data[\"image_capture\"])\n        validate_credentials_for_sign_off(encode_string(Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\")))\n        self.job_obj.accept_self(task_name_01, process_data[\"image_capture\"])\n        self.job_obj.assign_peer(task_name_01, process_data[\"image_capture\"], username=users_list,\n                                 job_execution_by=job_execution_by)\n        self.job_obj.assign_peer(task_name_01, process_data[\"image_capture\"],\n                                 username=[Env.get_env_data(\"QA_ADMIN_USERNAME_01\")], job_execution_by=job_execution_by)\n        logout()\n    \n        login(Env.get_env_data(\"QA_ADMIN_USERNAME_01\"), Env.get_env_data(\"QA_ADMIN_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        self.job_obj.get_specific_job()\n        validate_credentials_for_sign_off(encode_string(Env.get_env_data(\"QA_ADMIN_PASSWORD_01\")))\n>       self.job_obj.accept_peer(task_name_01, process_data[\"image_capture\"])\n\ntests/scenarios/job/test_solo_task_lock_execution.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/unit/execution/jobs.py:908: in accept_peer\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>\nmessage = '{\"timestamp\":1733502374,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"564486080442900480\",\"user...\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E801\",\"message\":\"You are not assigned to this Job\",\"errorInfo\":null}]}'\n\n    def status_200(response, message=None):\n        if message is None:\n            message = response.text\n>       assert response.status_code == 200, message\nE       AssertionError: {\"timestamp\":1733502374,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"564486080442900480\",\"userId\":null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E801\",\"message\":\"You are not assigned to this Job\",\"errorInfo\":null}]}\n\nutil/validate_response.py:4: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"env_setup","time":{"start":1733490527832,"stop":1733490527832,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"login_fixture","time":{"start":1733490527832,"stop":1733490528079,"duration":247},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733490528079,"stop":1733490528284,"duration":205},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"select_usecase_fixture","time":{"start":1733490528284,"stop":1733490528542,"duration":258},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"username_to_user_id_mapping","time":{"start":1733490528542,"stop":1733490529001,"duration":459},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_group_creation","time":{"start":1733502301228,"stop":1733502301852,"duration":624},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"flush_param_counters","time":{"start":1733502354207,"stop":1733502354207,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"flush_param_counters::0","time":{"start":1733502374625,"stop":1733502374625,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"solo_task_lock"},{"name":"tag","value":"job"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.job"},{"name":"suite","value":"test_solo_task_lock_execution"},{"name":"subSuite","value":"TestSoloTaskLockExecution"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"29333-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.job.test_solo_task_lock_execution"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"job_execution_by","value":"'user_group'"},{"name":"users_list","value":"[]"}],"links":[{"name":"https://app.clickup.com/t/86cuzruf1","url":"https://app.clickup.com/t/86cuzruf1","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["scenario","solo_task_lock","job"]},"source":"aea93de225e58dd.json","parameterValues":["'user_group'","[]"]}