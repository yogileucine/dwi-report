{"uid":"de436871e2d396ab","name":"Test to verify the execution of a job with continue task recurrence and both verification enabled","fullName":"tests.scenarios.job.test_recurrence_execution.TestRecurrenceExecution#test_job_execution_with_continuing_task_recurrence_and_both_verification_enabled","historyId":"2e98e0a005c48d3d81d276a2a12ac5dc","time":{"start":1733763350571,"stop":1733763368394,"duration":17823},"description":"This test is to verify the execution of a job with continue task recurrence and both verification enabled","descriptionHtml":"<p>This test is to verify the execution of a job with continue task recurrence and both verification enabled</p>\n","status":"broken","statusMessage":"KeyError: 'data'","statusTrace":"self = <test_recurrence_execution.TestRecurrenceExecution object at 0x7b6d60cd98e0>, user_group_creation = 'Auto_Test_user_group_TestRecurrenceExecution_501', job_execution_by = 'user'\nusers_list = ['process.publisher.03', 'facility.admin.03']\n\n    @allure.title(\"Test to verify the execution of a job with continue task recurrence and both verification enabled\")\n    @allure.description(\"This test is to verify the execution of a job with continue task recurrence and both \"\n                        \"verification enabled\")\n    @allure.link(\"https://app.clickup.com/t/86cvv7rey\")\n    @pytest.mark.scenario\n    @pytest.mark.job\n    @pytest.mark.task_recurrence_execution\n    @pytest.mark.test_job_execution_with_continuing_task_recurrence_and_both_verification_enabled\n    @pytest.mark.parametrize(\"job_execution_by, users_list\", [\n        (\"user\", [Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"), Env.get_env_data(\"QA_ADMIN_USERNAME_01\")]),\n        (\"user_group\", [])])\n    def test_job_execution_with_continuing_task_recurrence_and_both_verification_enabled(self, user_group_creation,\n                                                                                         job_execution_by, users_list):\n        process_data = self.recurrence_obj.test_adding_parameters_with_both_verification_and_publish_prototype_with_recurrence()\n        login(Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"), Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        self.job_obj.assign_user_and_user_group_to_process(job_execution_by, users_list, user_group_creation,\n                                                           all_task_assignmnet=True)\n        self.job_obj.create_job()\n        self.job_obj.start_job()\n        self.job_obj.start_task(task_name_01, recurrence=True)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"single_line_param\"], data={\"value\": \"qwerty\"})\n        self.job_obj.verify_self(task_name_01, process_data[\"single_line_param\"])\n        validate_credentials_for_sign_off(encode_string(Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\")))\n        self.job_obj.accept_self(task_name_01, process_data[\"single_line_param\"])\n        self.job_obj.assign_peer(task_name_01, process_data[\"single_line_param\"], username=users_list,\n                                 job_execution_by=job_execution_by)\n    \n        self.job_obj.execute_parameter(task_name_01, process_data[\"multi_line_param\"], data={\"value\": \"qwerty\"})\n        self.job_obj.verify_self(task_name_01, process_data[\"multi_line_param\"])\n        validate_credentials_for_sign_off(encode_string(Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\")))\n        self.job_obj.accept_self(task_name_01, process_data[\"multi_line_param\"])\n        self.job_obj.assign_peer(task_name_01, process_data[\"multi_line_param\"], username=users_list,\n                                 job_execution_by=job_execution_by)\n    \n        self.job_obj.execute_parameter(task_name_01, process_data[\"single_select_param\"], data={\"value\": \"monday\"})\n        self.job_obj.verify_self(task_name_01, process_data[\"single_select_param\"])\n        validate_credentials_for_sign_off(encode_string(Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\")))\n        self.job_obj.accept_self(task_name_01, process_data[\"single_select_param\"])\n        self.job_obj.assign_peer(task_name_01, process_data[\"single_select_param\"], username=users_list,\n                                 job_execution_by=job_execution_by)\n    \n        self.job_obj.execute_parameter(task_name_01, process_data[\"multi_select_param\"],\n                                       data={\"value\": [\"gold\", \"silver\"]})\n        self.job_obj.verify_self(task_name_01, process_data[\"multi_select_param\"])\n        validate_credentials_for_sign_off(encode_string(Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\")))\n        self.job_obj.accept_self(task_name_01, process_data[\"multi_select_param\"])\n        self.job_obj.assign_peer(task_name_01, process_data[\"multi_select_param\"], username=users_list,\n                                 job_execution_by=job_execution_by)\n        logout()\n    \n        login(Env.get_env_data(\"QA_ADMIN_USERNAME_01\"), Env.get_env_data(\"QA_ADMIN_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        self.job_obj.get_specific_job()\n        validate_credentials_for_sign_off(encode_string(Env.get_env_data(\"QA_ADMIN_PASSWORD_01\")))\n        self.job_obj.accept_peer(task_name_01, process_data[\"single_line_param\"])\n    \n        validate_credentials_for_sign_off(encode_string(Env.get_env_data(\"QA_ADMIN_PASSWORD_01\")))\n        self.job_obj.accept_peer(task_name_01, process_data[\"multi_line_param\"])\n    \n        validate_credentials_for_sign_off(encode_string(Env.get_env_data(\"QA_ADMIN_PASSWORD_01\")))\n        self.job_obj.accept_peer(task_name_01, process_data[\"single_select_param\"])\n    \n        validate_credentials_for_sign_off(encode_string(Env.get_env_data(\"QA_ADMIN_PASSWORD_01\")))\n        self.job_obj.accept_peer(task_name_01, process_data[\"multi_select_param\"])\n    \n        logout()\n    \n        login(Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"), Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        self.job_obj.get_specific_job()\n        self.job_obj.complete_task(task_name_01, recurrence=True, continue_recurrence=True)\n    \n        new_recurrence_data = self.job_obj.poll_stage_data(job_id=const.JOB_ID, stage_name=stage_name_01)\n        self.job_obj.assert_task_execution_type(new_recurrence_data, 1, \"RECURRING\")\n    \n        self.job_obj.start_task(task_name_01, recurrence=True, recurrence_start_reason=\"Test_recurrence\")\n        self.job_obj.execute_parameter(task_name_01, process_data[\"single_line_param\"], data={\"value\": \"qwerty\"})\n>       self.job_obj.verify_self(task_name_01, process_data[\"single_line_param\"])\n\ntests/scenarios/job/test_recurrence_execution.py:263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unit.execution.jobs.Jobs object at 0x7b6d60cab1d0>, task_name = 'Task-1.1', parameter_name = 'single_line_text-1', job_id = '565580747108491264'\n\n    def verify_self(self, task_name, parameter_name, job_id=None):\n        if not job_id:\n            job_id = const.JOB_ID\n        stage, task, param_details, stage_index, task_index = self.get_stage_task_parameter_details_for_execution(\n            task_name, parameter_name,\n            job_id)\n        parameter_response_id = param_details[\"response\"][0][\"id\"]\n        url = const.PARAMETER_VERIFICATIONS + const.PARAMETER_EXECUTIONS + const.SLASH + parameter_response_id + const.SELF_VERIFICATION + const.VERIFY\n        response = Request.post(url, data=None, files=None)\n        response_data = response.json()\n>       data = response_data[\"data\"]\nE       KeyError: 'data'\n\ntests/unit/execution/jobs.py:792: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":true,"beforeStages":[{"name":"env_setup","time":{"start":1733752687376,"stop":1733752687376,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"login_fixture","time":{"start":1733752687376,"stop":1733752687642,"duration":266},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733752687642,"stop":1733752687801,"duration":159},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"select_usecase_fixture","time":{"start":1733752687801,"stop":1733752687918,"duration":117},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"username_to_user_id_mapping","time":{"start":1733752687918,"stop":1733752688451,"duration":533},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_group_creation","time":{"start":1733763253914,"stop":1733763254563,"duration":649},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"flush_param_counters","time":{"start":1733763350571,"stop":1733763350571,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"flush_param_counters::0","time":{"start":1733763368420,"stop":1733763368420,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"test_job_execution_with_continuing_task_recurrence_and_both_verification_enabled"},{"name":"tag","value":"task_recurrence_execution"},{"name":"tag","value":"job"},{"name":"tag","value":"scenario"},{"name":"tag","value":"recurrence"},{"name":"parentSuite","value":"tests.scenarios.job"},{"name":"suite","value":"test_recurrence_execution"},{"name":"subSuite","value":"TestRecurrenceExecution"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"53959-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.job.test_recurrence_execution"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"job_execution_by","value":"'user'"},{"name":"users_list","value":"['process.publisher.03', 'facility.admin.03']"}],"links":[{"name":"https://app.clickup.com/t/86cvv7rey","url":"https://app.clickup.com/t/86cvv7rey","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f1c0caefe19ea31e","status":"passed","time":{"start":1733500964364,"stop":1733500990405,"duration":26041}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["recurrence","scenario","test_job_execution_with_continuing_task_recurrence_and_both_verification_enabled","task_recurrence_execution","job"]},"source":"de436871e2d396ab.json","parameterValues":["'user'","['process.publisher.03', 'facility.admin.03']"]}