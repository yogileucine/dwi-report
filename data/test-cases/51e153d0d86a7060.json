{"uid":"51e153d0d86a7060","name":"Test to verify that the value of Linked resource parameter get correctly populated while execution","fullName":"tests.scenarios.job.test_job_execution.TestJobExecution#test_validate_values_of_linked_resource_parameter_while_execution","historyId":"0d23f6a27e1437f73ae6824dda6d6bec","time":{"start":1733498734345,"stop":1733498759533,"duration":25188},"description":"This testcase tests if the value of the linked resource parameter gets correctly populated while execution of the job","descriptionHtml":"<p>This testcase tests if the value of the linked resource parameter gets correctly populated while execution of the job</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_job_execution.TestJobExecution object at 0x7af8222fe7e0>, user_group_creation = 'Auto_Test_user_group_TestJobExecution_1399', job_execution_by = 'user', users_list = ['process.publisher.03']\n\n    @allure.title(\n        \"Test to verify that the value of Linked resource parameter get correctly populated while execution\")\n    @allure.description(\n        \"This testcase tests if the value of the linked resource parameter gets correctly populated while execution \"\n        \"of the job\")\n    @allure.link(\"https://app.clickup.com/t/86cu9cyh2\")\n    @pytest.mark.scenario\n    @pytest.mark.job\n    @pytest.mark.validate_values_of_linked_resource_parameter_while_execution\n    @pytest.mark.parametrize(\"job_execution_by, users_list\", [(\"user\", [Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\")]),\n                                                              (\"user_group\", [])])\n    def test_validate_values_of_linked_resource_parameter_while_execution(self, user_group_creation, job_execution_by, users_list):\n        properties_01 = object_type_with_properties.test_create_object_type_properties()\n        properties_02 = object_type_with_properties.test_create_object_type_properties()\n        relation_name = \"relation_02\"\n        cardinality = \"ONE_TO_ONE\"\n        login(Env.get_env_data(\"QA_GLOBAL_ADMIN_USERNAME_01\"), Env.get_env_data(\"QA_GLOBAL_ADMIN_PASSWORD_01\"))\n        create_object_relations(properties_01[\"display_name\"], relation_name, cardinality,\n                                properties_02[\"display_name\"])\n    \n        login(Env.get_env_data(\"QA_ADMIN_USERNAME_01\"), Env.get_env_data(\"QA_ADMIN_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        checklist_name_01 = self.test_validate_values_of_linked_resource_parameter_while_execution.__name__\n        create_new_checklist(checklist_name_01, const.USECASE_ID, const.FACILITY_ID)\n        add_stage(stage_name_01)\n        add_task(stage_name_01, task_name_01)\n    \n        res_param_01 = get_parameter_data(\"single_resource\")\n        add_single_resource_selector_parameter(stage_name_01, task_name_01, res_param_01, properties_01[\"display_name\"])\n    \n        res_param_02 = get_parameter_data(\"single_resource\")\n        linked_parameter = {\"parameter\": res_param_01[\"label\"], \"object_property\": relation_name}\n        add_single_resource_selector_parameter(stage_name_01, task_name_01, res_param_02, properties_02[\"display_name\"],\n                                               linked_parameter=linked_parameter)\n        validate_checklist()\n        submit_checklist_for_review()\n        checklist_assignment([Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"),\n                              Env.get_env_data(\"QA_PUBLISHER_USERNAME_02\")])\n        review_sign_off_and_publish_prototype(\"QA_ADMIN_USERNAME_01\", \"QA_PUBLISHER_USERNAME_01\",\n                                              \"QA_PUBLISHER_USERNAME_02\")\n        logout()\n    \n        object_data_02, display_name = object_type_objects.test_create_objects(\n            {properties_02[\"title_display_name\"]: \"property_02_object\",\n             properties_02[\"single_line_property\"]: \"single_line\",\n             properties_02[\"multi_line_property\"]: \"multi_line\",\n             properties_02[\"number_property\"]: \"123\",\n             properties_02[\"multi_select_property\"]: [properties_02[\"multi_select_option\"]],\n             properties_02[\"single_select_property\"]: properties_02[\"single_select_option\"],\n             properties_02[\"date_property\"]: \"12-12-2012\"},\n            properties_02[\"display_name\"])\n    \n>       object_data_01, display_name = object_type_objects.test_create_objects(\n            {properties_01[\"title_display_name\"]: \"property_01_object\",\n             properties_01[\"single_line_property\"]: \"single_line\",\n             properties_01[\"multi_line_property\"]: \"multi_line\",\n             properties_01[\"number_property\"]: \"123\",\n             properties_01[\"multi_select_property\"]: [properties_01[\"multi_select_option\"]],\n             properties_01[\"single_select_property\"]: properties_01[\"single_select_option\"],\n             properties_01[\"date_property\"]: \"12-12-2012\",\n             properties_01[\"date_time_property\"]: datetime.now().strftime(\"%d-%m-%Y %H:%M\"),\n             relation_name: object_data_02[\"displayName\"]},\n            properties_01[\"display_name\"], False)\n\ntests/scenarios/job/test_job_execution.py:1008: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/scenarios/ontology/test_object.py:39: in test_create_objects\n    response = create_objects(display_name, objects_inputs, random_data, reason)\ntests/unit/ontology/objects.py:158: in create_objects\n    if not status_200(response):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>, message = ''\n\n    def status_200(response, message=None):\n        if message is None:\n            message = response.text\n>       assert response.status_code == 200, message\nE       AssertionError\n\nutil/validate_response.py:4: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"env_setup","time":{"start":1733490527832,"stop":1733490527832,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"login_fixture","time":{"start":1733490527832,"stop":1733490528079,"duration":247},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733490528079,"stop":1733490528284,"duration":205},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"select_usecase_fixture","time":{"start":1733490528284,"stop":1733490528542,"duration":258},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"username_to_user_id_mapping","time":{"start":1733490528542,"stop":1733490529001,"duration":459},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_group_creation","time":{"start":1733498002570,"stop":1733498003483,"duration":913},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"flush_param_counters","time":{"start":1733498734345,"stop":1733498734345,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"flush_param_counters::0","time":{"start":1733498759558,"stop":1733498759558,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"validate_values_of_linked_resource_parameter_while_execution"},{"name":"tag","value":"job"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.job"},{"name":"suite","value":"test_job_execution"},{"name":"subSuite","value":"TestJobExecution"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"29333-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.job.test_job_execution"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"job_execution_by","value":"'user'"},{"name":"users_list","value":"['process.publisher.03']"}],"links":[{"name":"https://app.clickup.com/t/86cu9cyh2","url":"https://app.clickup.com/t/86cu9cyh2","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["scenario","validate_values_of_linked_resource_parameter_while_execution","job"]},"source":"51e153d0d86a7060.json","parameterValues":["'user'","['process.publisher.03']"]}