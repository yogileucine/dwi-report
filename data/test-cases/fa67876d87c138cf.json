{"uid":"fa67876d87c138cf","name":"Test to verify that user can execute the job with all parameters and recurrence","fullName":"tests.scenarios.job.test_recurrence_execution.TestRecurrenceExecution#test_job_execution_with_all_parameters_and_recurrence","historyId":"d76e2b538d02c6b9425cd5fb467bf0bf","time":{"start":1733938592124,"stop":1733938616665,"duration":24541},"description":"This test is to verify the user can execute the job with all parameters and recurrence","descriptionHtml":"<p>This test is to verify the user can execute the job with all parameters and recurrence</p>\n","status":"broken","statusMessage":"ValueError: Could not found the provided objects","statusTrace":"self = <test_recurrence_execution.TestRecurrenceExecution object at 0x78cf7c3c66f0>, user_group_creation = 'Auto_Test_user_group_TestRecurrenceExecution_88', job_execution_by = 'user', users_list = ['process.publisher.03']\n\n    @allure.title(\"Test to verify that user can execute the job with all parameters and recurrence\")\n    @allure.description(\"This test is to verify the user can execute the job with all parameters and recurrence\")\n    @allure.link(\"https://app.clickup.com/t/86cvx83e3\")\n    @pytest.mark.scenario\n    @pytest.mark.job\n    @pytest.mark.task_recurrence_execution\n    @pytest.mark.test_job_execution_with_all_parameters_and_recurrence\n    @pytest.mark.parametrize(\"job_execution_by, users_list\", [(\"user\", [Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\")]),\n                                                              (\"user_group\", [])])\n    def test_job_execution_with_all_parameters_and_recurrence(self, user_group_creation, job_execution_by, users_list):\n        process_data = self.recurrence_obj.test_adding_all_parameters_and_publish_prototype_with_recurrence()\n        login(Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"), Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        self.job_obj.assign_user_and_user_group_to_process(job_execution_by, users_list, user_group_creation,\n                                                           all_task_assignmnet=True)\n        self.job_obj.create_job()\n        self.job_obj.start_job()\n        self.job_obj.start_task(task_name_01)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"image_capture\"], data=None)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"signature_param\"], data=None)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"single_line_param\"], data={\"value\": \"qwerty\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"multi_line_param\"], data={\"value\": \"qwerty\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"single_select_param\"], data={\"value\": \"monday\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"multi_select_param\"],\n                                       data={\"value\": [\"gold\", \"silver\"]})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"yes_no_param\"], data={\"value\": \"BSE\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"date_param\"], data={\"value\": \"01-12-2023\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"date_time_param\"],\n                                       data={\"value\": \"01-12-2023 13:23\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"file_upload_param\"], data=None)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"number_param\"], data={\"value\": \"102\"})\n>       self.job_obj.execute_parameter(task_name_01, process_data[\"single_resource_param\"],\n                                       data={\"value\": process_data[\"object_data\"][\"displayName\"]})\n\ntests/scenarios/job/test_recurrence_execution.py:573: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <unit.execution.jobs.Jobs object at 0x78cf7c39aed0>, task_name = 'Task-1.1', parameter_name = 'single_resource-1', job_id = '566315815124836352', data = {'value': 'Auto_single_line_value_14181440'}\nnegative_testcase = False, reason = None\n\n    def execute_parameter(self, task_name, parameter_name, job_id=None, data=None, negative_testcase=False,\n                          reason=None):\n        if not job_id:\n            job_id = const.JOB_ID\n        audit_data_entry = []\n        stage, task, param_details, stage_index, task_index = self.get_stage_task_parameter_details_for_execution(\n            task_name, parameter_name,\n            job_id)\n        parameter_response_id = param_details[\"response\"][0][\"id\"]\n        payload_with_param_details = None\n        if param_details[\"type\"] in [parameter_types.SIGNATURE.value, parameter_types.MEDIA.value,\n                                     parameter_types.FILE_UPLOAD.value]:\n    \n            if data and data[\"archive\"]:\n                media_data = copy.deepcopy(param_details[\"response\"][0][\"medias\"][0])\n                media_data[\"archived\"] = True\n                media_data[\"mediaId\"] = media_data.pop(\"id\")\n                media_data[\"reason\"] = \".\"\n                param_details[\"data\"][\"medias\"] = [media_data]\n                payload_with_param_details = param_details\n            else:\n                payload_with_param_details = self.get_payload_for_image_signature(param_details)\n    \n            if param_details[\"type\"] == parameter_types.SIGNATURE.value:\n                audit_data_entry.append(\n                    get_user_details_for_audit_logs() + \"updated the signature for \"f\"parameter \\\"{parameter_name}\\\" in Task{stage_index}.{task_index} \\\"{task_name}\\\" of the stage \\\"\"f\"{stage.stage_name}\\\"\")\n    \n            elif (param_details[\"type\"] == parameter_types.MEDIA.value or param_details[\n                \"type\"] == parameter_types.FILE_UPLOAD.value) and data and data[\"archive\"]:\n                audit_data_entry.append(\n                    get_user_details_for_audit_logs() + \"archived file Name: \"f\"Image_capture (Description: Media for parameter execution) for parameter \\\"{parameter_name}\\\" in Task\"f\"{stage_index}.{task_index} \\\"{task_name}\\\" of the stage \\\"{stage.stage_name}\\\"\")\n            else:\n                audit_data_entry.append(\n                    get_user_details_for_audit_logs() + \"uploaded file Name: \"f\"Image_capture (Description: Media for parameter execution) for parameter \\\"{parameter_name}\\\" in Task\"f\"{stage_index}.{task_index} \\\"{task_name}\\\" of the stage \\\"{stage.stage_name}\\\"\")\n    \n        elif param_details[\"type\"] in [parameter_types.SINGLE_LINE.value, parameter_types.MULTI_LINE.value,\n                                       parameter_types.NUMBER.value, parameter_types.SHOULD_BE.value]:\n            existing_data = param_details.get(\"data\", {})\n            existing_data['input'] = data[\"value\"]\n            param_details[\"data\"] = existing_data\n            payload_with_param_details = param_details\n            value = data[\"value\"]\n            if param_details[\"type\"] == parameter_types.SINGLE_LINE.value or param_details[\n                \"type\"] == parameter_types.MULTI_LINE.value:\n                audit_data_entry.append(\n                    get_user_details_for_audit_logs() + f\"updated text input to \\\"{value}\\\" for parameter \\\"{parameter_name}\\\" in Task{stage_index}.{task_index} \\\"{task_name}\\\" of the stage \\\"{stage.stage_name}\\\"\")\n    \n            elif param_details[\"type\"] == parameter_types.NUMBER.value:\n                audit_data_entry.append(\n                    get_user_details_for_audit_logs() + f\"provided a value of \\\"{value}\\\" for \\\"{parameter_name}\\\" in Task{stage_index}.{task_index} \\\"{task_name}\\\" of the stage \\\"{stage.stage_name}\\\"\")\n    \n            elif param_details[\"type\"] == parameter_types.SHOULD_BE.value and not reason:\n                audit_data_entry.append(\n                    get_user_details_for_audit_logs() + f\"provided \\\"{value}\\\" for \\\"{parameter_name}\\\" in Task{stage_index}.{task_index} \\\"{task_name}\\\" of the stage \\\"{stage.stage_name}\\\"\")\n    \n            elif param_details[\"type\"] == parameter_types.SHOULD_BE.value and reason:\n                audit_data_entry.append(\n                    get_user_details_for_audit_logs() + f\"provided \\\"{value}\\\" for \\\"{parameter_name}\\\" stating reason \\\"{reason}\\\" in Task{stage_index}.{task_index} \\\"{task_name}\\\" of the stage \\\"{stage.stage_name}\\\"\")\n    \n        elif param_details[\"type\"] in [parameter_types.SINGLE_SELECT.value, parameter_types.MULTISELECT.value,\n                                       parameter_types.YES_NO.value, \"CHECKLIST\"]:\n            options = param_details[\"data\"]\n            update_options_data = []\n            choices = param_details[\"response\"][0][\"choices\"]\n            for option in options:\n                if option[\"name\"] == data[\"value\"] or option[\"name\"] in data[\"value\"]:\n                    option[\"state\"] = \"SELECTED\"\n                elif choices and choices[option[\"id\"]] == \"SELECTED\":\n                    option[\"state\"] = \"SELECTED\"\n                else:\n                    option[\"state\"] = \"NOT_SELECTED\"\n                update_options_data.append(option)\n            if not update_options_data:\n                raise ValueError(\"Provide option does not exist in the parameter\")\n            param_details[\"data\"] = update_options_data\n            payload_with_param_details = param_details\n    \n            if isinstance(data[\"value\"], list):\n                for option in data[\"value\"]:\n                    audit_data_entry.append(\n                        get_user_details_for_audit_logs() + f\"selected \\\"{option}\\\" for parameter \\\"{parameter_name}\\\" in Task{stage_index}.{task_index} \\\"{task_name}\\\" of the stage \\\"{stage.stage_name}\\\"\")\n    \n            elif param_details[\"type\"] == parameter_types.YES_NO.value and reason is not None:\n                value = data[\"value\"]\n                audit_data_entry.append(\n                    get_user_details_for_audit_logs() + f\"selected \\\"{value}\\\" stating reason \\\"{reason}\\\" for parameter \\\"{parameter_name}\\\" in Task{stage_index}.{task_index} \\\"{task_name}\\\" of the stage \\\"{stage.stage_name}\\\"\")\n            else:\n                value = data[\"value\"]\n                audit_data_entry.append(\n                    get_user_details_for_audit_logs() + f\"selected \\\"{value}\\\" for parameter \\\"{parameter_name}\\\" in Task{stage_index}.{task_index} \\\"{task_name}\\\" of the stage \\\"{stage.stage_name}\\\"\")\n    \n        elif param_details[\"type\"] in [parameter_types.DATE.value, parameter_types.DATE_TIME.value]:\n            param_details[\"data\"] = {\"input\": self.convert_date_and_time_to_unix_timestamp(data[\"value\"])}\n            payload_with_param_details = param_details\n            value = data[\"value\"]\n            audit_data_entry.append(\n                get_user_details_for_audit_logs() + f\"set \\\"{value}\\\" for \\\"{parameter_name}\\\" in Task{stage_index}.{task_index} \\\"{task_name}\\\" of the stage \\\"{stage.stage_name}\\\"\")\n    \n        elif param_details[\"type\"] in [parameter_types.RESOURCE.value, parameter_types.MULTI_RESOURCE.value]:\n            objects_data = get_data_using_collection(param_details[\"data\"][\"collection\"])\n            choices = []\n            for object_details in objects_data:\n                if object_details[\"displayName\"] == data[\"value\"] or object_details[\"displayName\"] in data[\"value\"]:\n                    choices.append(\n                        {\"objectId\": object_details[\"id\"], \"objectDisplayName\": object_details[\"displayName\"],\n                         \"objectExternalId\": object_details[\"externalId\"],\n                         \"collection\": object_details[\"collection\"]})\n                    param_details[\"data\"][\"choices\"] = choices\n                    display_name = object_details[\"displayName\"]\n                    id = object_details[\"externalId\"]\n                    audit_data_entry.append(\n                        get_user_details_for_audit_logs() + f\"selected \\\"{display_name}(ID: {id})\\\" for \\\"{parameter_name}\\\" for Task{stage_index}.{task_index} \\\"{task_name}\\\" of the stage \\\"{stage.stage_name}\\\"\")\n    \n            if not choices:\n>               raise ValueError(\"Could not found the provided objects\")\nE               ValueError: Could not found the provided objects\n\ntests/unit/execution/jobs.py:541: ValueError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"env_setup","time":{"start":1733926201392,"stop":1733926201392,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"login_fixture","time":{"start":1733926201392,"stop":1733926201601,"duration":209},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733926201601,"stop":1733926201720,"duration":119},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"select_usecase_fixture","time":{"start":1733926201720,"stop":1733926201814,"duration":94},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"username_to_user_id_mapping","time":{"start":1733926201814,"stop":1733926202088,"duration":274},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_group_creation","time":{"start":1733938341561,"stop":1733938342230,"duration":669},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"flush_param_counters","time":{"start":1733938592124,"stop":1733938592124,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"flush_param_counters::0","time":{"start":1733938616693,"stop":1733938616693,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"test_job_execution_with_all_parameters_and_recurrence"},{"name":"tag","value":"task_recurrence_execution"},{"name":"tag","value":"job"},{"name":"tag","value":"scenario"},{"name":"tag","value":"recurrence"},{"name":"parentSuite","value":"tests.scenarios.job"},{"name":"suite","value":"test_recurrence_execution"},{"name":"subSuite","value":"TestRecurrenceExecution"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"60865-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.job.test_recurrence_execution"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"job_execution_by","value":"'user'"},{"name":"users_list","value":"['process.publisher.03']"}],"links":[{"name":"https://app.clickup.com/t/86cvx83e3","url":"https://app.clickup.com/t/86cvx83e3","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"7a1928177d6bc66a","status":"broken","statusDetails":"ValueError: Could not found the provided objects","time":{"start":1733925771989,"stop":1733925796522,"duration":24533}},{"uid":"a847992f16a86772","status":"broken","statusDetails":"KeyError: 'object_data'","time":{"start":1733763632571,"stop":1733763656897,"duration":24326}},{"uid":"aa750bb41da6fe9","status":"broken","statusDetails":"KeyError: 'object_data'","time":{"start":1733501116338,"stop":1733501140109,"duration":23771}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["recurrence","test_job_execution_with_all_parameters_and_recurrence","scenario","task_recurrence_execution","job"]},"source":"fa67876d87c138cf.json","parameterValues":["'user'","['process.publisher.03']"]}