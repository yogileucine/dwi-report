{"uid":"5a8003d73fd1471d","name":"Test to complete the job having repeated task","fullName":"tests.scenarios.job.test_repeat_task.TestRepeatTask#test_complete_job_having_repeat_task","historyId":"aaeb5f9d323cc40f275e661f3f0521e3","time":{"start":1733501359326,"stop":1733501387104,"duration":27778},"description":"This test case verify that if user can complete the job having completed repeated task","descriptionHtml":"<p>This test case verify that if user can complete the job having completed repeated task</p>\n","status":"failed","statusMessage":"AssertionError: {\"timestamp\":1733501387,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"564481940887150596\",\"userId\":null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E450\",\"message\":\"Parameter Data Inconsistent\",\"errorInfo\":null},{\"id\":\"564481940887150595\",\"userId\":null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E450\",\"message\":\"Parameter Data Inconsistent\",\"errorInfo\":null},{\"id\":\"564481940887150598\",\"userId\":null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E450\",\"message\":\"Parameter Data Inconsistent\",\"errorInfo\":null}]}","statusTrace":"self = <test_repeat_task.TestRepeatTask object at 0x7af822255280>, user_group_creation = 'Auto_Test_user_group_TestRepeatTask_779', job_execution_by = 'user_group', users_list = []\n\n    @allure.title(\"Test to complete the job having repeated task\")\n    @allure.description(\"This test case verify that if user can complete the job having completed repeated task\")\n    @allure.link(\"https://app.clickup.com/t/86cvw0x8t\")\n    @pytest.mark.scenario\n    @pytest.mark.job\n    @pytest.mark.repeat_task\n    @pytest.mark.complete_job_having_repeat_task\n    @pytest.mark.parametrize(\"job_execution_by, users_list\", [(\"user\", [Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\")]),\n                                                              (\"user_group\", [])])\n    def test_complete_job_having_repeat_task(self, user_group_creation, job_execution_by, users_list):\n        process_data = self.process_obj.test_adding_all_parameters_and_publish_prototype()\n        login(Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"), Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        self.job_obj.assign_user_and_user_group_to_process(job_execution_by, users_list, user_group_creation,\n                                                           all_task_assignmnet=True)\n        self.job_obj.create_job()\n        self.job_obj.start_job()\n        self.job_obj.start_task(task_name_01)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"image_capture\"], data=None)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"signature_param\"], data=None)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"single_line_param\"], data={\"value\": \"qwerty\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"multi_line_param\"], data={\"value\": \"qwerty\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"single_select_param\"], data={\"value\": \"monday\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"multi_select_param\"],\n                                       data={\"value\": [\"gold\", \"silver\"]})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"yes_no_param\"], data={\"value\": \"BSE\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"date_param\"], data={\"value\": \"01-12-2023\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"date_time_param\"],\n                                       data={\"value\": \"01-12-2023 13:23\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"file_upload_param\"], data=None)\n        # self.job_obj.execute_parameter(task_name_01, process_data[\"should_be_param\"], data={\"value\": \"102\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"number_param\"], data={\"value\": \"102\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"single_resource_param\"],\n                                       data={\"value\": process_data[\"object_data\"][\"displayName\"]})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"multi_resource_param\"],\n                                       data={\"value\": process_data[\"object_data\"][\"displayName\"]})\n    \n        self.job_obj.complete_task(task_name_01)\n        self.job_obj.repeat_task(task_name_01)\n        self.job_obj.start_task(task_name_01, order_tree=1)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"image_capture\"], data=None)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"signature_param\"], data=None)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"single_line_param\"], data={\"value\": \"qwerty\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"multi_line_param\"], data={\"value\": \"qwerty\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"single_select_param\"], data={\"value\": \"monday\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"multi_select_param\"],\n                                       data={\"value\": [\"gold\", \"silver\"]})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"yes_no_param\"], data={\"value\": \"BSE\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"date_param\"], data={\"value\": \"01-12-2023\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"date_time_param\"],\n                                       data={\"value\": \"01-12-2023 13:23\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"file_upload_param\"], data=None)\n        # self.job_obj.execute_parameter(task_name_01, process_data[\"should_be_param\"], data={\"value\": \"102\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"number_param\"], data={\"value\": \"102\"})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"single_resource_param\"],\n                                       data={\"value\": process_data[\"object_data\"][\"displayName\"]})\n        self.job_obj.execute_parameter(task_name_01, process_data[\"multi_resource_param\"],\n                                       data={\"value\": process_data[\"object_data\"][\"displayName\"]})\n    \n>       self.job_obj.complete_task(task_name_01, order_tree=1)\n\ntests/scenarios/job/test_repeat_task.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/unit/execution/jobs.py:679: in complete_task\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>\nmessage = '{\"timestamp\":1733501387,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"564481940887150596\",\"user...null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E450\",\"message\":\"Parameter Data Inconsistent\",\"errorInfo\":null}]}'\n\n    def status_200(response, message=None):\n        if message is None:\n            message = response.text\n>       assert response.status_code == 200, message\nE       AssertionError: {\"timestamp\":1733501387,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"564481940887150596\",\"userId\":null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E450\",\"message\":\"Parameter Data Inconsistent\",\"errorInfo\":null},{\"id\":\"564481940887150595\",\"userId\":null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E450\",\"message\":\"Parameter Data Inconsistent\",\"errorInfo\":null},{\"id\":\"564481940887150598\",\"userId\":null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E450\",\"message\":\"Parameter Data Inconsistent\",\"errorInfo\":null}]}\n\nutil/validate_response.py:4: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"env_setup","time":{"start":1733490527832,"stop":1733490527832,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"login_fixture","time":{"start":1733490527832,"stop":1733490528079,"duration":247},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733490528079,"stop":1733490528284,"duration":205},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"select_usecase_fixture","time":{"start":1733490528284,"stop":1733490528542,"duration":258},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"username_to_user_id_mapping","time":{"start":1733490528542,"stop":1733490529001,"duration":459},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_group_creation","time":{"start":1733501260597,"stop":1733501261228,"duration":631},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"flush_param_counters","time":{"start":1733501359325,"stop":1733501359325,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"flush_param_counters::0","time":{"start":1733501387126,"stop":1733501387126,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"complete_job_having_repeat_task"},{"name":"tag","value":"repeat_task"},{"name":"tag","value":"job"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.job"},{"name":"suite","value":"test_repeat_task"},{"name":"subSuite","value":"TestRepeatTask"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"29333-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.job.test_repeat_task"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"job_execution_by","value":"'user_group'"},{"name":"users_list","value":"[]"}],"links":[{"name":"https://app.clickup.com/t/86cvw0x8t","url":"https://app.clickup.com/t/86cvw0x8t","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["repeat_task","scenario","job","complete_job_having_repeat_task"]},"source":"5a8003d73fd1471d.json","parameterValues":["'user_group'","[]"]}