{"uid":"4f17e70f46a5bc63","name":"Test to verify that the branching rules works as per the latest value of single select dropdown in recurred task during execution","fullName":"tests.scenarios.job.test_recurrence_execution.TestRecurrenceExecution#test_branching_rules_as_per_latest_value_of_single_select_dropdown_in_recurred_task","historyId":"6fdafce9101881f3a57a07bf887d584d","time":{"start":1733938707158,"stop":1733938720638,"duration":13480},"description":"This test is to verify that the branching rules works as per the latest value of single selectdropdown in recurred task during execution","descriptionHtml":"<p>This test is to verify that the branching rules works as per the latest value of single selectdropdown in recurred task during execution</p>\n","status":"failed","statusMessage":"AssertionError: {\"timestamp\":1733938720,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"566316263198138368\",\"userId\":null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E450\",\"message\":\"Parameter Data Inconsistent\",\"errorInfo\":null}]}","statusTrace":"self = <test_recurrence_execution.TestRecurrenceExecution object at 0x78cf7c3c6420>, user_group_creation = 'Auto_Test_user_group_TestRecurrenceExecution_88', job_execution_by = 'user', users_list = ['process.publisher.03']\n\n    @allure.title(\"Test to verify that the branching rules works as per the latest value of single select dropdown in \"\n                  \"recurred task during execution\")\n    @allure.description(\"This test is to verify that the branching rules works as per the latest value of single select\"\n                        \"dropdown in recurred task during execution\")\n    @allure.link(\"https://app.clickup.com/t/86cvx82tq\")\n    @pytest.mark.scenario\n    @pytest.mark.job\n    @pytest.mark.task_recurrence_execution\n    @pytest.mark.test_branching_rules_as_per_latest_value_of_single_select_dropdown_in_recurred_task\n    @pytest.mark.parametrize(\"job_execution_by, users_list\", [(\"user\", [Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\")]),\n                                                              (\"user_group\", [])])\n    def test_branching_rules_as_per_latest_value_of_single_select_dropdown_in_recurred_task(self, user_group_creation,\n                                                                                            job_execution_by,\n                                                                                            users_list):\n        process_data = self.recurrence_obj.test_add_branching_rule_in_single_select_dropdown_parameter_to_hide_parameters_in_different_tasks_with_recurrence()\n        login(Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\"), Env.get_env_data(\"QA_PUBLISHER_PASSWORD_01\"))\n        select_facility(const.FACILITY_NAME)\n        select_usecase(const.USECASE_NAME)\n        self.job_obj.assign_user_and_user_group_to_process(job_execution_by, users_list, user_group_creation,\n                                                           all_task_assignmnet=True)\n        self.job_obj.create_job()\n        self.job_obj.start_job()\n        self.job_obj.start_task(task_name_01, recurrence=True)\n        self.job_obj.execute_parameter(task_name_01, process_data[\"single_dropdown_param\"], data={\"value\": \"sunday\"})\n        self.job_obj.complete_task(task_name_01, recurrence=True, continue_recurrence=True)\n        self.job_obj.start_task(task_name_02, recurrence=True)\n        if not self.job_obj.validate_if_parameter_is_hidden(task_name_02, process_data[\"sign_param\"]):\n            raise AssertionError(\n                \"The parameter \" + process_data[\"sign_param\"] + \" is not hidden as per the branching rules defined\")\n        self.job_obj.execute_parameter(task_name_02, process_data[\"image_param\"], data=None)\n        self.job_obj.complete_task(task_name_02, recurrence=True, continue_recurrence=True)\n    \n        self.job_obj.start_task(task_name_01, recurrence=True, recurrence_start_reason=\"Test_recurrence\")\n        self.job_obj.execute_parameter(task_name_01, process_data[\"single_dropdown_param\"], data={\"value\": \"saturday\"})\n>       self.job_obj.complete_task(task_name_01, recurrence=True)\n\ntests/scenarios/job/test_recurrence_execution.py:734: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/unit/execution/jobs.py:679: in complete_task\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [400]>\nmessage = '{\"timestamp\":1733938720,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"566316263198138368\",\"user...null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E450\",\"message\":\"Parameter Data Inconsistent\",\"errorInfo\":null}]}'\n\n    def status_200(response, message=None):\n        if message is None:\n            message = response.text\n>       assert response.status_code == 200, message\nE       AssertionError: {\"timestamp\":1733938720,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"566316263198138368\",\"userId\":null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E450\",\"message\":\"Parameter Data Inconsistent\",\"errorInfo\":null}]}\n\nutil/validate_response.py:4: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"env_setup","time":{"start":1733926201392,"stop":1733926201392,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"login_fixture","time":{"start":1733926201392,"stop":1733926201601,"duration":209},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733926201601,"stop":1733926201720,"duration":119},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"select_usecase_fixture","time":{"start":1733926201720,"stop":1733926201814,"duration":94},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"username_to_user_id_mapping","time":{"start":1733926201814,"stop":1733926202088,"duration":274},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_group_creation","time":{"start":1733938341561,"stop":1733938342230,"duration":669},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"flush_param_counters","time":{"start":1733938707157,"stop":1733938707158,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"flush_param_counters::0","time":{"start":1733938720665,"stop":1733938720665,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"test_branching_rules_as_per_latest_value_of_single_select_dropdown_in_recurred_task"},{"name":"tag","value":"task_recurrence_execution"},{"name":"tag","value":"job"},{"name":"tag","value":"scenario"},{"name":"tag","value":"recurrence"},{"name":"parentSuite","value":"tests.scenarios.job"},{"name":"suite","value":"test_recurrence_execution"},{"name":"subSuite","value":"TestRecurrenceExecution"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"60865-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.job.test_recurrence_execution"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"job_execution_by","value":"'user'"},{"name":"users_list","value":"['process.publisher.03']"}],"links":[{"name":"https://app.clickup.com/t/86cvx82tq","url":"https://app.clickup.com/t/86cvx82tq","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"543a626e33c6d0da","status":"failed","statusDetails":"AssertionError: {\"timestamp\":1733763761,\"object\":\"LIST\",\"status\":\"ERROR\",\"message\":\"error\",\"errors\":[{\"id\":\"565582430953775104\",\"userId\":null,\"userGroupId\":null,\"type\":\"bad.request\",\"code\":\"E450\",\"message\":\"Parameter Data Inconsistent\",\"errorInfo\":null}]}","time":{"start":1733763747993,"stop":1733763761449,"duration":13456}},{"uid":"113d245677fb7342","status":"passed","time":{"start":1733501230450,"stop":1733501244780,"duration":14330}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["recurrence","test_branching_rules_as_per_latest_value_of_single_select_dropdown_in_recurred_task","scenario","task_recurrence_execution","job"]},"source":"4f17e70f46a5bc63.json","parameterValues":["'user'","['process.publisher.03']"]}