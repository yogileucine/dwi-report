{"uid":"ead522d989170f95","name":"Test to verify that the Set relation Task Actions works as expected during execution","fullName":"tests.scenarios.job.test_task_automation_actions.TestTaskAutomationActions#test_set_relation_task_action_for_one_to_many_cardinality_triggered_at_completion_of_task","historyId":"433a83a3eee07c86acb4dc6e91f35d67","time":{"start":1733942022588,"stop":1733942042616,"duration":20028},"description":"This testcase tests if Set relation task actions for one to many cardinality added on task gets triggered at completion of the task during job execution","descriptionHtml":"<p>This testcase tests if Set relation task actions for one to many cardinality added on task gets triggered at completion of the task during job execution</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_task_automation_actions.TestTaskAutomationActions object at 0x78cf7c2e9520>, user_group_creation = 'Auto_Test_user_group_TestTaskAutomationActions_1279', job_execution_by = 'user'\nusers_list = ['process.publisher.03']\n\n    @allure.title(\"Test to verify that the Set relation Task Actions works as expected during \"\n                  \"execution\")\n    @allure.description(\"This testcase tests if Set relation task actions for one to many cardinality added on task \"\n                        \"gets triggered at completion of the task during job execution\")\n    @allure.link(\"https://app.clickup.com/t/86cupye5x\")\n    @pytest.mark.scenario\n    @pytest.mark.job\n    @pytest.mark.set_relation_task_action_for_one_to_many_cardinality_triggered_at_completion_of_task\n    @pytest.mark.parametrize(\"job_execution_by, users_list\", [(\"user\", [Env.get_env_data(\"QA_PUBLISHER_USERNAME_01\")]),\n                                                              (\"user_group\", [])])\n    def test_set_relation_task_action_for_one_to_many_cardinality_triggered_at_completion_of_task(self,\n                                                                                                  user_group_creation,\n                                                                                                  job_execution_by,\n                                                                                                  users_list):\n        process_data = self.process_obj.test_add_set_relation_action_type_with_one_to_many_cardinality_at_completion_of_task()\n        object_data_02, display_name = object_type_objects.test_create_objects(\n            {process_data[\"properties_02\"][\"title_display_name\"]: \"object-02\",\n             process_data[\"properties_02\"][\"single_line_property\"]: \"single_line\",\n             process_data[\"properties_02\"][\"multi_line_property\"]: \"multi_line\",\n             process_data[\"properties_02\"][\"number_property\"]: \"02\",\n             process_data[\"properties_02\"][\"multi_select_property\"]: [\n                 process_data[\"properties_02\"][\"multi_select_option\"]],\n             process_data[\"properties_02\"][\"single_select_property\"]: process_data[\"properties_02\"][\n                 \"single_select_option\"],\n             process_data[\"properties_02\"][\"date_property\"]: \"12-12-2012\",\n             process_data[\"properties_02\"][\"date_time_property\"]: datetime.now().strftime(\"%d-%m-%Y %H:%M\")},\n            process_data[\"properties_02\"][\"display_name\"])\n    \n>       object_data_01, display_name = object_type_objects.test_create_objects(\n            {process_data[\"properties_01\"][\"title_display_name\"]: \"object_01\",\n             process_data[\"properties_01\"][\"single_line_property\"]: \"single_line\",\n             process_data[\"properties_01\"][\"multi_line_property\"]: \"multi_line\",\n             process_data[\"properties_01\"][\"number_property\"]: \"01\",\n             process_data[\"properties_01\"][\"multi_select_property\"]: [\n                 process_data[\"properties_01\"][\"multi_select_option\"]],\n             process_data[\"properties_01\"][\"single_select_property\"]: process_data[\"properties_01\"][\n                 \"single_select_option\"],\n             process_data[\"properties_01\"][\"date_property\"]: \"12-12-2012\",\n             process_data[\"properties_01\"][\"date_time_property\"]: datetime.now().strftime(\"%d-%m-%Y %H:%M\"),\n             process_data[\"relation_name\"]: object_data_02[\"displayName\"]},\n            process_data[\"properties_01\"][\"display_name\"], False)\n\ntests/scenarios/job/test_task_automation_actions.py:2272: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/scenarios/ontology/test_object.py:39: in test_create_objects\n    response = create_objects(display_name, objects_inputs, random_data, reason)\ntests/unit/ontology/objects.py:158: in create_objects\n    if not status_200(response):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>, message = ''\n\n    def status_200(response, message=None):\n        if message is None:\n            message = response.text\n>       assert response.status_code == 200, message\nE       AssertionError\n\nutil/validate_response.py:4: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"env_setup","time":{"start":1733926201392,"stop":1733926201392,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"login_fixture","time":{"start":1733926201392,"stop":1733926201601,"duration":209},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"get_facility","time":{"start":1733926201601,"stop":1733926201720,"duration":119},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"select_usecase_fixture","time":{"start":1733926201720,"stop":1733926201814,"duration":94},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"username_to_user_id_mapping","time":{"start":1733926201814,"stop":1733926202088,"duration":274},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_group_creation","time":{"start":1733939992512,"stop":1733939993160,"duration":648},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"flush_param_counters","time":{"start":1733942022588,"stop":1733942022588,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"flush_param_counters::0","time":{"start":1733942042662,"stop":1733942042662,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"set_relation_task_action_for_one_to_many_cardinality_triggered_at_completion_of_task"},{"name":"tag","value":"job"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios.job"},{"name":"suite","value":"test_task_automation_actions"},{"name":"subSuite","value":"TestTaskAutomationActions"},{"name":"host","value":"ubuntu"},{"name":"thread","value":"60865-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.job.test_task_automation_actions"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"job_execution_by","value":"'user'"},{"name":"users_list","value":"['process.publisher.03']"}],"links":[{"name":"https://app.clickup.com/t/86cupye5x","url":"https://app.clickup.com/t/86cupye5x","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c8bc6b4c6972f83d","status":"broken","statusDetails":"requests.exceptions.ConnectTimeout: HTTPSConnectionPool(host='api.c.qa.platform.leucinetech.com', port=443): Max retries exceeded with url: /v1/checklists/565595742441545728 (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7b6d5f0f0da0>, 'Connection to api.c.qa.platform.leucinetech.com timed out. (connect timeout=None)'))","time":{"start":1733766922364,"stop":1733767069091,"duration":146727}},{"uid":"92a1f4a66f5a907","status":"failed","statusDetails":"AssertionError","time":{"start":1733504082871,"stop":1733504102388,"duration":19517}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["scenario","set_relation_task_action_for_one_to_many_cardinality_triggered_at_completion_of_task","job"]},"source":"ead522d989170f95.json","parameterValues":["'user'","['process.publisher.03']"]}